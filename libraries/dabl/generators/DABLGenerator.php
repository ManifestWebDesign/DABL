<?php

class DABLGenerator extends BaseGenerator {

	/**
	 * Returns an associative array of file contents for
	 * each view generated by this class
	 * @param string $tableName
	 * @return array
	 */
	function getViews($tableName){
		return array(
			'edit.php' => $this->getEditView($tableName),
			'index.php' => $this->getIndexView($tableName),
			'show.php' => $this->getShowView($tableName),
			'grid.php' => $this->getGridView($tableName),
			'list.php' => $this->getListView($tableName)
		);
	}

	/**
	 * Generates a String with an html/php view for editing view MVC
	 * objects in the given table.
	 * @param String $tableName
	 * @param String $className
	 * @return String
	 */
	function getEditView($tableName){
		$controllerName = $this->getControllerName($tableName);
		$className = $this->getModelName($tableName);
		$plural = $this->getViewDirName($tableName);
		$single = strtolower($tableName);
		$instance = new $className;
		$pk = $instance->getPrimaryKey();
		ob_start();
?>
<form method="POST" action="<?php echo "<?php echo site_url('".$plural."/save') ?>" ?>">
<?php
		if($pk){
?>
	<input type="hidden" name="<?php echo $pk ?>" value="<?php echo '<?php echo htmlentities($'.$single.'->'."get$pk".'()) ?>' ?>" />
<?php
		}
?>
	<table>
		<tbody>
<?php
		foreach($instance->getColumnNames() as $columnName){
			if($columnName==$pk)continue;
			$method = "get$columnName";
			$output = '<?php echo htmlentities($'.$single.'->'.$method.'()) ?>';
?>
			<tr>
				<th><?php echo $columnName ?></th>
				<td><input type="text" name="<?php echo $columnName ?>" value="<?php echo $output ?>" /></td>
			</tr>
<?php
		}
?>
			<tr>
				<td>
					<input type="submit" value="Save" />
				</td>
			</tr>
		</tbody>
	</table>
</form>
<?php
		return ob_get_clean();
	}

	/**
	 * Generates a String with an html/php view showing all of the
	 * objects from the given table in a grid
	 * @param String $tableName
	 * @param String $className
	 * @return String
	 */
	function getGridView($tableName){
		$controllerName = $this->getControllerName($tableName);
		$className = $this->getModelName($tableName);
		$instance = new $className;
		$pk = $instance->getPrimaryKey();
		$plural = $this->getViewDirName($tableName);
		$single = strtolower($tableName);
		$actions = $this->getActions($tableName);

		ob_start();
?>
<table class="object-grid <?php echo $single ?>-grid">
	<thead>
		<tr>
<?php
		foreach($instance->getColumnNames() as $columnName){
?>
			<th><?php echo $columnName ?></th>
<?php
		}
		foreach($actions as $action){
?>
			<th>&nbsp;</th>
<?php
		}
?>
		</tr>
	</thead>
	<tbody>
<?php echo '<?php foreach($'.$plural.' as $key => $'.$single.'): ?>' ?>

		<tr class="<?php echo '<?php echo' ?> ($key & 1) ? 'odd' : 'even' <?php echo '?>' ?>">
<?php
		foreach($instance->getColumnNames() as $columnName){
			$output = '<?php echo htmlentities($'.$single.'->'."get$columnName".'()) ?>';
?>
			<td><?php echo $output ?></td>
<?php
		}
		foreach($actions as $action_label => $action_url){
			if($action_label == 'Index') continue;
?>
			<td><a href="<?php echo $action_url ?>"><?php echo $action_label ?></a></td>
<?php
		}
?>
		</tr>
<?php echo '<?php endforeach ?>' ?>

	</tbody>
</table>
<?php
		return ob_get_clean();
	}

	/**
	 * Generates a String with an html/php view showing all of the
	 * objects from the given table in a list
	 * @param String $tableName
	 * @param String $className
	 * @return String
	 */
	function getListView($tableName){
		$controllerName = $this->getControllerName($tableName);
		$className = $this->getModelName($tableName);
		$instance = new $className;
		$pk = $instance->getPrimaryKey();
		$plural = $this->getViewDirName($tableName);
		$single = strtolower($tableName);
		ob_start();
?>
<ul class="object-list <?php echo $single ?>-list">
	<?php echo '<?php foreach($'.$plural.' as $key => $'.$single.'): ?>' ?>
	
	<li class="<?php echo '<?php echo' ?> ($key & 1) ? 'odd' : 'even' <?php echo '?>' ?>">
		<dl>
			<?php foreach($instance->getColumnNames() as $columnName): ?>

			<dt><?php echo $columnName ?></dt>
			<dd><?php echo '<?php echo htmlentities($'.$single.'->'."get$columnName".'()) ?>' ?></dd>
			<?php endforeach ?>

		</dl>
	</li>
	<?php echo '<?php endforeach ?>' ?>
	
</ul>
<?php
		return ob_get_clean();
	}

	/**
	 * Generates a String with an html/php view showing all of the
	 * objects from the given table in a grid
	 * @param String $tableName
	 * @param String $className
	 * @return String
	 */
	function getIndexView($tableName){
		$controllerName = $this->getControllerName($tableName);
		$className = $this->getModelName($tableName);
		$instance = new $className;
		$pk = $instance->getPrimaryKey();
		$plural = $this->getViewDirName($tableName);
		$single = strtolower($tableName);
		ob_start();
?>
<a href="<?php echo "<?php echo site_url('".$plural."/edit') ?>" ?>">new <?php echo str_replace('_', ' ', $single) ?></a>
<?php echo '<?php load_view("'.$plural.'/grid", $params) ?>' ?>
<?
		return ob_get_clean();
	}

	/**
	 * Generates a String with an html/php view for show view MVC
	 * objects in the given table.
	 * @param String $tableName
	 * @param String $className
	 * @return String
	 */
	function getShowView($tableName){
		$controllerName = $this->getControllerName($tableName);
		$className = $this->getModelName($tableName);
		$plural = $this->getViewDirName($tableName);
		$single = strtolower($tableName);
		$instance = new $className;
		$pk = $instance->getPrimaryKey();
		ob_start();
		$actions = $this->getActions($tableName);
		foreach($actions as $action_label => $action_url){
			if($action_label == 'Show') continue;
?>
	<a href="<?php echo $action_url ?>"><?php echo $action_label ?></a>

<?php
		}
?>
	<table>
		<tbody>
<?php
		foreach($instance->getColumnNames() as $columnName){
			if($columnName==$pk)continue;
			$method = "get$columnName";
?>
			<tr>
				<th><?php echo $columnName ?></th>
				<td><?php echo '<?php echo htmlentities($'.$single.'->'.$method.'()) ?>' ?></td>
			</tr>
<?php
		}
?>
		</tbody>
	</table>
<?php
		return ob_get_clean();
	}

	function getActions($tableName){
		$controllerName = $this->getControllerName($tableName);
		$className = $this->getModelName($tableName);
		$plural = $this->getViewDirName($tableName);
		$single = strtolower($tableName);
		$instance = new $className;
		$pk = $instance->getPrimaryKey();
		$pkMethod = "get$pk";
		$actions = array();
		if(!$pk)return $actions;

		$actions['Index'] = "<?php echo site_url('".$plural."') ?>";
		$actions['Show'] = "<?php echo site_url('".$plural."/show/'.$".$single."->".$pkMethod."()) ?>";
		$actions['Edit'] = "<?php echo site_url('".$plural."/edit/'.$".$single."->".$pkMethod."()) ?>";
		$actions['Delete'] = "<?php echo site_url('".$plural."/delete/'.$".$single."->".$pkMethod."()) ?>";

		$fkeys_to = $this->getForeignKeysToTable($tableName);
		foreach($fkeys_to as $k => $r){
			$from_table = $r['from_table'];
			$from_className = $this->getModelName($from_table);
			$from_column = $r['from_column'];
			$to_column = $r['to_column'];
			if(@$used_to[$from_table]){
				unset($fkeys_to[$k]);
				continue;
			}
			$used_to[$from_table]=$from_column;
			$actions[ucwords($this->getViewDirName($from_table))] = "<?php echo site_url('".$plural.'/'.$this->getViewDirName($from_table)."/'.$".$single."->".$pkMethod."()) ?>";
		}

		return $actions;
	}

	/**
	 * Generates a String with Controller class for MVC
	 * @param String $tableName
	 * @param String $className
	 * @return String
	 */
	function getController($tableName){
		$controllerName = $this->getControllerName($tableName);
		$plural = $this->getViewDirName($tableName);
		$className = $this->getModelName($tableName);
		$single = strtolower($tableName);
		$instance = new $className;
		$pk = $instance->getPrimaryKey();
		$pkMethod = "get$pk";

		ob_start();
		echo "<?php\n";
?>

class <?php echo $controllerName ?> extends ApplicationController {

	function index(){
		$this-><?php echo $plural ?> = <?php echo $className ?>::getAll();
	}

	function save($id = null){
		$id = $id ? $id : @$_POST[<?php echo $className ?>::getPrimaryKey()];
		$<?php echo $single ?> = $id ? <?php echo $className ?>::retrieveByPK($id) : new <?php echo $className ?>;
		$<?php echo $single ?>->fromArray($_POST);
		$<?php echo $single ?>->save();
		redirect('<?php echo $plural ?>/show/'.$<?php echo $single ?>-><?php echo $pkMethod ?>());
	}

	function delete($id = null){
		$id = $id ? $id : @$_POST[<?php echo $className ?>::getPrimaryKey()];
		$<?php echo $single ?> = <?php echo $className ?>::retrieveByPK($id);
		$<?php echo $single ?>->delete();
		redirect('<?php echo $plural ?>');
	}

	function show($id = null){
		$id = $id ? $id : @$_POST[<?php echo $className ?>::getPrimaryKey()];
		$<?php echo $single ?> = $id ? <?php echo $className ?>::retrieveByPK($id) : new <?php echo $className ?>;
		$this-><?php echo $single ?> = $<?php echo $single ?>;
	}

	function edit($id = null){
		$id = $id ? $id : @$_POST[<?php echo $className ?>::getPrimaryKey()];
		$<?php echo $single ?> = $id ? <?php echo $className ?>::retrieveByPK($id) : new <?php echo $className ?>;
		$this-><?php echo $single ?> = $<?php echo $single ?>;
	}

<?php
		foreach($this->getForeignKeysToTable($tableName) as $r){
			$from_table = $r['from_table'];
			$from_className = $this->getModelName($from_table);
			$from_column = $r['from_column'];
			$to_column = $r['to_column'];
			$fk_plural = $this->getViewDirName($from_table);
			if(@$used_to[$from_table])
				continue;
			$used_to[$from_table]=$from_column;

			$this_classname = $this->getModelName($tableName);
			$this_single = strtolower($tableName);
?>
	function <?php echo $fk_plural ?>($id){
		$<?php echo $this_single ?> = <?php echo $this_classname ?>::retrieveByPK($id);
		$this-><?php echo $fk_plural ?> = $<?php echo $this_single ?>->get<?php echo $from_className ?>s();
		$this->renderView('<?php echo $fk_plural ?>/index');
		$this->render_view = false;
	}
	
<?php
		}
?>

}
<?php
		return ob_get_clean();
	}

	/**
	 * @param string $tableName
	 * @return string
	 */
	function getControllerName($tableName){
		$controllerName = str_replace(' ', '', ucwords(str_replace('_', ' ', $tableName)));
		$controllerName = self::pluralize($controllerName);
		$controllerName = $controllerName.'Controller';
		return $controllerName;
	}

	function getControllerFileName($tableName){
		return $this->getControllerName($tableName).".php";
	}
}
